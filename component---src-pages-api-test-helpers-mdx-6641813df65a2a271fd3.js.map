{"version":3,"sources":["webpack:///./src/pages/api/test-helpers.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-api-test-helpers-mdx-6641813df65a2a271fd3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`These functions are used to make it easier to write tests for GrAMPS data sources.`}</p>\n    </PageDescription>\n    <h5 {...{\n      \"id\": \"expectmockfieldsresolver-fieldarray\"\n    }}><inlineCode parentName=\"h5\">{`expectMockFields(resolver, fieldArray)`}</inlineCode></h5>\n    <p>{`Creates Jest tests for each field in `}<inlineCode parentName=\"p\">{`fieldArray`}</inlineCode>{` to ensure that the `}<inlineCode parentName=\"p\">{`resolver`}</inlineCode>{` returns a mock value for it.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` This helper is intended for use with mock resolvers.`}</p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h6>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resolver`}</inlineCode>{`: a mock resolver for a given GraphQL type`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fieldArray`}</inlineCode>{`: an array of field names that should be mocked`}</li>\n    </ul>\n    <h6 {...{\n      \"id\": \"return-value\"\n    }}>{`Return Value`}</h6>\n    <p>{`Returns a `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/jest/docs/en/api.html#testname-fn\"\n      }}>{`Jest test`}</a>{`.`}</p>\n    <h6 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h6>\n    <p>{`Assuming type `}<inlineCode parentName=\"p\">{`PFX_MyType`}</inlineCode>{` with two fields, `}<inlineCode parentName=\"p\">{`fieldOne`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fieldTwo`}</inlineCode>{`, which both have mock resolvers defined:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import resolvers from '../src/resolvers';\n\ndescribe('PFX_MyType', () => {\n  const mockResolver = resolvers.mockResolvers.PFX_MyType();\n  expectMockFields(mockResolver, ['fieldOne', 'fieldTwo']);\n});\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"expectmocklistresolver-fieldarray\"\n    }}><inlineCode parentName=\"h5\">{`expectMockList(resolver, fieldArray)`}</inlineCode></h5>\n    <p>{`Creates Jest tests for each field in `}<inlineCode parentName=\"p\">{`fieldArray`}</inlineCode>{` to ensure that the `}<inlineCode parentName=\"p\">{`resolver`}</inlineCode>{` returns an instance of `}<a parentName=\"p\" {...{\n        \"href\": \"http://dev.apollodata.com/tools/graphql-tools/mocking.html#Using-MockList-in-resolvers\"\n      }}><inlineCode parentName=\"a\">{`MockList`}</inlineCode></a>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` This helper is intended for use with mock resolvers.`}</p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h6>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resolver`}</inlineCode>{`: a mock resolver for a given GraphQL type`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fieldArray`}</inlineCode>{`: an array of field names that should be mocked`}</li>\n    </ul>\n    <h6 {...{\n      \"id\": \"return-value-1\"\n    }}>{`Return Value`}</h6>\n    <p>{`Returns an array of `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/jest/docs/en/api.html#testname-fn\"\n      }}>{`Jest tests`}</a>{`.`}</p>\n    <h6 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h6>\n    <p>{`Assuming type `}<inlineCode parentName=\"p\">{`PFX_MyType`}</inlineCode>{` with two fields, `}<inlineCode parentName=\"p\">{`fieldOne`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fieldTwo`}</inlineCode>{`, which both use `}<inlineCode parentName=\"p\">{`MockList`}</inlineCode>{` to generate an array of mock data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import resolvers from '../src/resolvers';\n\ndescribe('PFX_MyType', () => {\n  const mockResolver = resolvers.mockResolvers.PFX_MyType();\n  expectMockList(mockResolver, ['fieldOne', 'fieldTwo']);\n});\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"expectnullableresolver-fieldarray\"\n    }}><inlineCode parentName=\"h5\">{`expectNullable(resolver, fieldArray)`}</inlineCode></h5>\n    <p>{`Creates Jest tests for each field in `}<inlineCode parentName=\"p\">{`fieldArray`}</inlineCode>{` to ensure that the `}<inlineCode parentName=\"p\">{`resolver`}</inlineCode>{` returns `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` if a value isn’t found for the given field.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` This helper is intended for use with field resolvers.`}</p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"parameters-2\"\n    }}>{`Parameters`}</h6>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resolver`}</inlineCode>{`: a mock resolver for a given GraphQL type`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fieldArray`}</inlineCode>{`: an array of field names that should be mocked`}</li>\n    </ul>\n    <h6 {...{\n      \"id\": \"return-value-2\"\n    }}>{`Return Value`}</h6>\n    <p>{`Returns an array of `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/jest/docs/en/api.html#testname-fn\"\n      }}>{`Jest tests`}</a>{`.`}</p>\n    <h6 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h6>\n    <p>{`Assuming type `}<inlineCode parentName=\"p\">{`PFX_MyType`}</inlineCode>{` with one nullable field, `}<inlineCode parentName=\"p\">{`fieldOne`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import resolvers from '../src/resolvers';\n\ndescribe('PFX_MyType', () => {\n  const resolver = resolvers.dataResolvers.PFX_MyType;\n  expectNullable(resolver, ['fieldOne']);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}