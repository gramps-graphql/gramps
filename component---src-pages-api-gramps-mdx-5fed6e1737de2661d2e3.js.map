{"version":3,"sources":["webpack:///./src/pages/api/gramps.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-api-gramps-mdx-5fed6e1737de2661d2e3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The `}<inlineCode parentName=\"p\">{`@gramps/gramps`}</inlineCode>{` package exports two functions that allow `}<a parentName=\"p\" {...{\n          \"href\": \"https://gramps.js.org/data-source/schema-stitching/\"\n        }}>{`GrAMPS data sources`}</a>{` to be combined.`}</p>\n      <p>{`Under the hood, this is done by merging all the of data sources, applying schema stitching as needed, merging context objects, and a few other checks and chores to make it easy for developers to quickly build GraphQL servers from separate data sources.`}</p>\n      <p>{`See the API docs below for the all available options, expected return values, and usage examples.`}</p>\n    </PageDescription>\n    <h2 {...{\n      \"id\": \"grampsoptions\"\n    }}><inlineCode parentName=\"h2\">{`gramps(options)`}</inlineCode></h2>\n    <p>{`The main function exported by the GrAMPS package, this generates `}<inlineCode parentName=\"p\">{`GraphQLOptions`}</inlineCode>{` as a function thatâ€™s `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/apollo-server/setup.html#options-function\"\n      }}>{`consumable by `}<inlineCode parentName=\"a\">{`apollo-server`}</inlineCode></a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`gramps`}</inlineCode>{` function accepts an `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` object which has the following properties:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`options.dataSources`}</inlineCode></strong></p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Default: `}<inlineCode parentName=\"em\">{`[]`}</inlineCode></em></p>\n        <p parentName=\"li\">{`An array of `}<a parentName=\"p\" {...{\n            \"href\": \"https://gramps.js.org/data-source/data-source-overview/\"\n          }}>{`GrAMPS data sources`}</a>{` to be combined.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`options.enableMockData`}</inlineCode></strong></p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Default: `}<inlineCode parentName=\"em\">{`process.env.GRAMPS_MODE === 'mock'`}</inlineCode></em></p>\n        <p parentName=\"li\">{`A boolean value determining whether or not mock resolvers should be added to the schema.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`options.extraContext`}</inlineCode></strong></p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Default: `}<inlineCode parentName=\"em\">{`req => ({})`}</inlineCode></em></p>\n        <p parentName=\"li\">{`An optional function that returns additional context to be passed to the resolvers. Must return an object.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`options.logger`}</inlineCode></strong></p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Default: `}<inlineCode parentName=\"em\">{`console`}</inlineCode></em></p>\n        <p parentName=\"li\">{`An optional logger tool. Must expose `}<inlineCode parentName=\"p\">{`warn`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` methods.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`options.apollo`}</inlineCode></strong></p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Default: `}<inlineCode parentName=\"em\">{`{}`}</inlineCode></em></p>\n        <p parentName=\"li\">{`Under the hood, GrAMPS executes the `}<inlineCode parentName=\"p\">{`makeExecutableSchema`}</inlineCode>{` (`}<a parentName=\"p\" {...{\n            \"href\": \"https://www.apollographql.com/docs/graphql-tools/generate-schema.html#makeExecutableSchema\"\n          }}>{`docs`}</a>{`) and `}<inlineCode parentName=\"p\">{`addMockFunctionsToSchema`}</inlineCode>{` (`}<a parentName=\"p\" {...{\n            \"href\": \"https://www.apollographql.com/docs/graphql-tools/mocking.html#addMockFunctionsToSchema\"\n          }}>{`docs`}</a>{`) functions from `}<inlineCode parentName=\"p\">{`graphql-tools`}</inlineCode>{`. It also returns a configuration object for an Apollo server (`}<a parentName=\"p\" {...{\n            \"href\": \"https://www.apollographql.com/docs/apollo-server/setup.html#graphqlOptions\"\n          }}>{`docs`}</a>{`). Use this option to pass additional configuration options to these function calls.`}</p>\n        <p parentName=\"li\">{`For example, to set `}<inlineCode parentName=\"p\">{`allowUndefinedInResolve`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` for debugging, set the option like this:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`const GraphQLOptions = gramps({\n  dataSources: [/* ... */],\n  apollo: {\n    makeExecutableSchema: {\n      allowUndefinedInResolve: false,\n    },\n  },\n});\n`}</code></pre>\n        <p parentName=\"li\"><strong parentName=\"p\">{`NOTE:`}</strong>{` The `}<inlineCode parentName=\"p\">{`typeDefs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`resolvers`}</inlineCode>{` arguments to `}<inlineCode parentName=\"p\">{`makeExecutableSchema`}</inlineCode>{` are set by GrAMPS, so any values set for them in the `}<inlineCode parentName=\"p\">{`apollo`}</inlineCode>{` options will be overridden.`}</p>\n      </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"return-value\"\n    }}>{`Return Value`}</h4>\n    <p>{`A function that accepts the request and returns a `}<inlineCode parentName=\"p\">{`GraphQLOptions`}</inlineCode>{` object. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/apollo-server/setup.html#options-function\"\n      }}>{`the apollo-server docs`}</a>{` for more information.`}</p>\n    <h4 {...{\n      \"id\": \"example-of-usage\"\n    }}>{`Example of Usage`}</h4>\n    <p>{`A simple example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import gramps from '@gramps/gramps';\nimport XKCD from '@gramps/data-source-xkcd';\n\nconst GraphQLOptions = gramps({ dataSources: [XKCD] });\n// => \\`GraphQLOptions\\` is valid config for any flavor of apollo-server\n`}</code></pre>\n    <p>{`A complete example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import gramps from '@gramps/gramps';\nimport XKCD from '@gramps/data-source-xkcd';\nimport getPino from 'pino';\n\nconst pino = getPino({ prettyPrint: true });\npino.log = pino.info; // logger must expose a \\`log\\` method\n\nconst GraphQLOptions = gramps({\n  dataSources: [XKCD],\n  enableMockData: true,\n  extraContext: req => ({\n    token: req.users.token,\n  }),\n  logger: pino,\n  apollo: {\n    addMockFunctionsToSchema: {\n      preserveResolvers: false,\n    },\n    makeExecutableSchema: {\n      logger: pino,\n      allowUndefinedInResolve: false,\n    },\n    apolloServer: {\n      debug: true,\n    },\n  }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"prepareoptions\"\n    }}><inlineCode parentName=\"h2\">{`prepare(options)`}</inlineCode></h2>\n    <p>{`In some use cases, itâ€™s better to get `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/apollo-server/setup.html#options-function\"\n      }}><inlineCode parentName=\"a\">{`GraphQLOptions`}</inlineCode></a>{` as an object instead of a function (for example, if youâ€™re planning to do `}<a parentName=\"p\" {...{\n        \"href\": \"https://gramps.js.org/data-source/schema-stitching/\"\n      }}>{`schema stitching`}</a>{` between your data sources).`}</p>\n    <p>{`In those use cases, you can use the `}<inlineCode parentName=\"p\">{`prepare`}</inlineCode>{` function, which is a named export from `}<inlineCode parentName=\"p\">{`@gramps/gramps`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`prepare`}</inlineCode>{` function accepts an `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` object that is identical to the `}<inlineCode parentName=\"p\">{`gramps()`}</inlineCode>{` functionâ€™s.`}</p>\n    <h4 {...{\n      \"id\": \"return-value-1\"\n    }}>{`Return Value`}</h4>\n    <p>{`Returns a `}<inlineCode parentName=\"p\">{`GraphQLOptions`}</inlineCode>{` object that can be passed directly to any Apollo server.`}</p>\n    <p>{`Additionally, it exposes an `}<inlineCode parentName=\"p\">{`addContext`}</inlineCode>{` method that follows the middleware pattern of `}<inlineCode parentName=\"p\">{`(req, res, next) => {}`}</inlineCode>{` to allow execution of the `}<inlineCode parentName=\"p\">{`extraContext`}</inlineCode>{` function.`}</p>\n    <h4 {...{\n      \"id\": \"example-of-usage-1\"\n    }}>{`Example of Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Express from 'express';\nimport bodyParser from 'body-parser';\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express';\nimport { mergeSchemas } from 'graphql-tools';\nimport { prepare } from '@gramps/gramps';\nimport XKCD from '@gramps/data-source-xkcd';\nimport Numbers from '@gramps/data-source-numbers';\n\nconst gramps = prepare({\n  dataSources: [XKCD, Numbers],\n  extraContext: req => ({ req }), // adds the request to the context\n});\n\n// Add a field that pulls number trivia for the given XKCD comicâ€™s number\nconst linkTypeDefs = \\`\n  extend type XKCD_Comic {\n    numbers: Numbers_Trivia\n  }\n\\`;\n\n// Add a resolver to make the above field actually work\nconst schema = mergeSchemas({\n  schemas: [gramps.schema, linkTypeDefs], // use \\`gramps.schema\\` for merging\n  resolvers: mergeInfo => ({\n    XKCD_Comic: {\n      numbers: {\n        fragment: \\`fragment XKCDFragment on XKCD_Comic { num }\\`,\n        resolve: (parent, args, context, info) => {\n          return mergeInfo.delegate(\n            'query',\n            'trivia',\n            { number: parent.num },\n            context,\n            info\n          );\n        }\n      }\n    }\n  })\n});\n\nconst app = new Express();\n\napp.use('/graphql',\n  bodyParser.json(),\n  gramps.addContext,         // Add the extra context\n  graphqlExpress({\n    schema,                  // Use the merged schema...\n    context: gramps.context, // ...and the GrAMPS context object\n  }),\n);\n\napp.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));\n\napp.listen(8080);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}