(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{377:function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return i})),r.d(t,"default",(function(){return p}));r(11),r(5),r(6),r(2),r(10),r(1),r(0);var a=r(103),n=r(395);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}var o,i={},s=(o="PageDescription",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",e)}),b={_frontmatter:i},c=n.a;function p(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,["components"]);return Object(a.b)(c,l({},b,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)(s,{mdxType:"PageDescription"},Object(a.b)("p",null,"These functions are used to make it easier to write tests for GrAMPS data sources.")),Object(a.b)("h5",{id:"expectmockfieldsresolver-fieldarray"},Object(a.b)("inlineCode",{parentName:"h5"},"expectMockFields(resolver, fieldArray)")),Object(a.b)("p",null,"Creates Jest tests for each field in ",Object(a.b)("inlineCode",{parentName:"p"},"fieldArray")," to ensure that the ",Object(a.b)("inlineCode",{parentName:"p"},"resolver")," returns a mock value for it."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"NOTE:")," This helper is intended for use with mock resolvers.")),Object(a.b)("h6",{id:"parameters"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"resolver"),": a mock resolver for a given GraphQL type"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fieldArray"),": an array of field names that should be mocked")),Object(a.b)("h6",{id:"return-value"},"Return Value"),Object(a.b)("p",null,"Returns a ",Object(a.b)("a",l({parentName:"p"},{href:"https://facebook.github.io/jest/docs/en/api.html#testname-fn"}),"Jest test"),"."),Object(a.b)("h6",{id:"example"},"Example"),Object(a.b)("p",null,"Assuming type ",Object(a.b)("inlineCode",{parentName:"p"},"PFX_MyType")," with two fields, ",Object(a.b)("inlineCode",{parentName:"p"},"fieldOne")," and ",Object(a.b)("inlineCode",{parentName:"p"},"fieldTwo"),", which both have mock resolvers defined:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"import resolvers from '../src/resolvers';\n\ndescribe('PFX_MyType', () => {\n  const mockResolver = resolvers.mockResolvers.PFX_MyType();\n  expectMockFields(mockResolver, ['fieldOne', 'fieldTwo']);\n});\n")),Object(a.b)("h5",{id:"expectmocklistresolver-fieldarray"},Object(a.b)("inlineCode",{parentName:"h5"},"expectMockList(resolver, fieldArray)")),Object(a.b)("p",null,"Creates Jest tests for each field in ",Object(a.b)("inlineCode",{parentName:"p"},"fieldArray")," to ensure that the ",Object(a.b)("inlineCode",{parentName:"p"},"resolver")," returns an instance of ",Object(a.b)("a",l({parentName:"p"},{href:"http://dev.apollodata.com/tools/graphql-tools/mocking.html#Using-MockList-in-resolvers"}),Object(a.b)("inlineCode",{parentName:"a"},"MockList")),"."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"NOTE:")," This helper is intended for use with mock resolvers.")),Object(a.b)("h6",{id:"parameters-1"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"resolver"),": a mock resolver for a given GraphQL type"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fieldArray"),": an array of field names that should be mocked")),Object(a.b)("h6",{id:"return-value-1"},"Return Value"),Object(a.b)("p",null,"Returns an array of ",Object(a.b)("a",l({parentName:"p"},{href:"https://facebook.github.io/jest/docs/en/api.html#testname-fn"}),"Jest tests"),"."),Object(a.b)("h6",{id:"example-1"},"Example"),Object(a.b)("p",null,"Assuming type ",Object(a.b)("inlineCode",{parentName:"p"},"PFX_MyType")," with two fields, ",Object(a.b)("inlineCode",{parentName:"p"},"fieldOne")," and ",Object(a.b)("inlineCode",{parentName:"p"},"fieldTwo"),", which both use ",Object(a.b)("inlineCode",{parentName:"p"},"MockList")," to generate an array of mock data:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"import resolvers from '../src/resolvers';\n\ndescribe('PFX_MyType', () => {\n  const mockResolver = resolvers.mockResolvers.PFX_MyType();\n  expectMockList(mockResolver, ['fieldOne', 'fieldTwo']);\n});\n")),Object(a.b)("h5",{id:"expectnullableresolver-fieldarray"},Object(a.b)("inlineCode",{parentName:"h5"},"expectNullable(resolver, fieldArray)")),Object(a.b)("p",null,"Creates Jest tests for each field in ",Object(a.b)("inlineCode",{parentName:"p"},"fieldArray")," to ensure that the ",Object(a.b)("inlineCode",{parentName:"p"},"resolver")," returns ",Object(a.b)("inlineCode",{parentName:"p"},"null")," if a value isnâ€™t found for the given field."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"NOTE:")," This helper is intended for use with field resolvers.")),Object(a.b)("h6",{id:"parameters-2"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"resolver"),": a mock resolver for a given GraphQL type"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fieldArray"),": an array of field names that should be mocked")),Object(a.b)("h6",{id:"return-value-2"},"Return Value"),Object(a.b)("p",null,"Returns an array of ",Object(a.b)("a",l({parentName:"p"},{href:"https://facebook.github.io/jest/docs/en/api.html#testname-fn"}),"Jest tests"),"."),Object(a.b)("h6",{id:"example-2"},"Example"),Object(a.b)("p",null,"Assuming type ",Object(a.b)("inlineCode",{parentName:"p"},"PFX_MyType")," with one nullable field, ",Object(a.b)("inlineCode",{parentName:"p"},"fieldOne"),":"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"import resolvers from '../src/resolvers';\n\ndescribe('PFX_MyType', () => {\n  const resolver = resolvers.dataResolvers.PFX_MyType;\n  expectNullable(resolver, ['fieldOne']);\n});\n")))}p.isMDXComponent=!0},393:function(e){e.exports=JSON.parse('{"data":{"site":{"pathPrefix":""}}}')},394:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"repository":{"baseUrl":"","subDirectory":""}}}}}')},395:function(e,t,r){"use strict";r(35),r(27);var a=r(1),n=r(393),l=r(0),o=r.n(l),i=r(102),s=r.n(i),b=r(188),c=r(121),p=r(3),d=r.n(p),m=r(373),u=function(e){var t,r=e.title,n=e.tabs,l=void 0===n?[]:n;return Object(a.b)("div",{className:d()(m.pageHeader,(t={},t[m.withTabs]=l.length,t))},Object(a.b)("div",{className:"bx--grid"},Object(a.b)("div",{className:"bx--row"},Object(a.b)("div",{className:"bx--col-lg-12"},Object(a.b)("h1",{id:"page-title",className:m.text},r)))))},O=r(394),j=r(374),f=function(e){var t=e.relativePagePath,r=e.repository,n=O.data.site.siteMetadata.repository,l=r||n,o=l.baseUrl,i=o+"/tree/master"+l.subDirectory+"/src/pages"+t;return o?Object(a.b)("div",{className:"bx--row "+j.row},Object(a.b)("div",{className:"bx--col"},Object(a.b)("a",{className:j.link,href:i},"Edit this page on GitHub"))):null},h=r(186),v=r(28),N=r(375);var y=function(e){var t,r;function n(){return e.apply(this,arguments)||this}return r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,n.prototype.render=function(){var e=this.props,t=e.tabs,r=e.slug,n=r.split("/").filter(Boolean).slice(-1)[0],l=t.map((function(e){var t,l=s()(e,{lower:!0}),o=l===n,i=r.replace(n,l);return Object(a.b)("li",{key:e,className:d()((t={},t[N.selectedItem]=o,t),N.listItem)},Object(a.b)(v.Link,{className:N.link,to:""+i},e))}));return Object(a.b)("div",{className:N.tabsContainer},Object(a.b)("div",{className:"bx--grid"},Object(a.b)("div",{className:"bx--row"},Object(a.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(a.b)("nav",null,Object(a.b)("ul",{className:N.list},l))))))},n}(o.a.Component),g=r(187);t.a=function(e){var t=e.pageContext,r=e.children,l=e.location,o=t.frontmatter,i=void 0===o?{}:o,p=t.relativePagePath,d=t.titleType,m=i.tabs,O=i.title,j=i.theme,v=i.description,N=i.keywords,k=n.data.site.pathPrefix,x=k?l.pathname.replace(k,""):l.pathname,C=m?x.split("/").slice(-1)[0]||s()(m[0],{lower:!0}):"";return Object(a.b)(c.a,{homepage:!1,theme:j,pageTitle:O,pageDescription:v,pageKeywords:N,titleType:d},Object(a.b)(u,{title:O,label:"label",tabs:m}),m&&Object(a.b)(y,{slug:x,tabs:m,currentTab:C}),Object(a.b)(g.a,{padded:!0},r,Object(a.b)(f,{relativePagePath:p})),Object(a.b)(h.a,{pageContext:t,location:l,slug:x,tabs:m,currentTab:C}),Object(a.b)(b.a,null))}}}]);
//# sourceMappingURL=component---src-pages-api-test-helpers-mdx-1f29f0cb3ac682b8eed6.js.map