{"version":3,"sources":["webpack:///./src/pages/data-source-tutorial/schema.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-data-source-tutorial-schema-mdx-94ef2364e29c018aad45.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`At this point, we’ve `}<a parentName=\"p\" {...{\n        \"href\": \"/data-source-tutorial/connector\"\n      }}>{`set up a connector`}</a>{` to tell our data source where data comes from, and `}<a parentName=\"p\" {...{\n        \"href\": \"/data-source-tutorial/model\"\n      }}>{`defined data access methods in a model`}</a>{` to make requests for specific types of data. In this section, we’ll create a GraphQL schema to describe our data.`}</p>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/setup\"\n        }}>{`Initial Data Source Setup`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/connector\"\n        }}>{`Create a Connector`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/model\"\n        }}>{`Create a Model`}</a></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`> `}<a parentName=\"strong\" {...{\n            \"href\": \"/data-source-tutorial/schema\"\n          }}>{`Write a GraphQL Schema`}</a></strong></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/resolvers\"\n        }}>{`Write Resolvers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/dev\"\n        }}>{`Use Development Modes`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"in-this-section\"\n    }}>{`In This Section`}</h2>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Remove the Example Query and Type</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Extend the Query Type</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Define an Input Type</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Define Field Types</AnchorLink>\n    </AnchorLinks>\n    <h2 {...{\n      \"id\": \"remove-the-example-query-and-type\"\n    }}>{`Remove the Example Query and Type`}</h2>\n    <p>{`To get set up, let’s start by removing the example query and type in `}<inlineCode parentName=\"p\">{`src/schema.graphql`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  # The query/queries for data access MUST extend the Query type.\n  extend type Query {\n-   # TODO: rename and add a description of this query\n-   YourDataSource(\n-     # TODO: Describe this argument\n-     id: ID!\n-   ): PFX_YourDataSource\n  }\n\n- # TODO: Choose a unique prefix and rename the type descriptively.\n- type PFX_YourDataSource {\n-   # The unique ID of the thing.\n-   id: ID!\n-   # Describe each field to help people use the data more effectively.\n-   name: String\n-   lucky_numbers: [Int]\n- }\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` If you’re not familiar with the syntax for GraphQL schemas,\n`}<a parentName=\"p\" {...{\n          \"href\": \"http://graphql.org/learn/schema/\"\n        }}>{`read the GraphQL docs`}</a>{` for more info.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"extend-the-query-type\"\n    }}>{`Extend the Query Type`}</h2>\n    <p>{`In order to make GraphQL queries, we need to extend the `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` type. `}<strong parentName=\"p\">{`This is a GrAMPS-specific feature that allows GrAMPS data sources to be combined without transpilation.`}</strong></p>\n    <p>{`Let’s add our `}<inlineCode parentName=\"p\">{`searchMoviesByTitle`}</inlineCode>{` query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  extend type Query {\n+   # Search for a movie by its title and (optionally) release year.\n+   searchMoviesByTitle(\n+     # Argument object with the title and year to search for.\n+     options: IMDB_MovieSearchInput\n+   ): [IMDB_Movie]\n  }\n`}</code></pre>\n    <p>{`We’ll only look at the `}<inlineCode parentName=\"p\">{`searchMoviesByTitle`}</inlineCode>{` part of the schema in this tutorial, but you can see the full schema `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gramps-graphql/data-source-imdbapi/blob/master/src/schema.graphql\"\n      }}>{`on GitHub`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"define-an-input-type\"\n    }}>{`Define an Input Type`}</h2>\n    <p>{`To make sure our query is easy to use, but still strongly typed, we’re using an `}<a parentName=\"p\" {...{\n        \"href\": \"http://graphql.org/graphql-js/mutations-and-input-types/\"\n      }}>{`input type`}</a>{` to define arguments. In the case of our movie search, the possible arguments are the name of the movie (required) and the year it was released (optional). Let’s add that to the schema.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`input IMDB_MovieSearchInput {\n  # The title of the movie to search for (e.g. “Ready Player One”).\n  title: String!\n\n  # (Optional) The year the movie was released.\n  year: String\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"define-field-types\"\n    }}>{`Define Field Types`}</h2>\n    <p>{`Next, we need to map the API responses to GraphQL types. To do this, let’s take a look at the response (with some values edited for space) from the database for a movie search:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`[\n  {\n    \"title\": \"Ready Player One\",\n    \"content_rating\": \"\",\n    \"original_title\": \"\",\n    \"metadata\": {\n      \"languages\": [\n        \"English\"\n      ],\n      \"asp_retio\": \"2.35 : 1\",\n      \"filming_locations\": [\n        \"Jewellery Quarter\",\n        \"Birmingham\",\n        \"England\",\n        \"UK\"\n      ],\n      \"also_known_as\": [\n        \"Jogador N&#186; 1\"\n      ],\n      \"countries\": [\n        \"USA\"\n      ],\n      \"gross\": \"\",\n      \"sound_mix\": [\n        \"Dolby Digital\",\n        \"Auro 11.1\",\n        \"Dolby Atmos\"\n      ],\n      \"budget\": \"\"\n    },\n    \"release_date\": \"2018-03-30\",\n    \"director\": \"Steven Spielberg\",\n    \"url\": {\n      \"url\": \"http://www.imdb.com/title/tt1677720\"\n    },\n    \"year\": \"2018\",\n    \"trailer\": [\n      {\n        \"mimeType\": \"video/mp4\",\n        \"definition\": \"720p\",\n        \"videoUrl\": \"https://video-http.media-imdb.com/M....mp4\"\n      },\n      // ...\n    ],\n    \"length\": \"\",\n    \"cast\": [\n      {\n        \"character\": \"The Iron Giant       (voice)\",\n        \"image\": \"https://images-na.ssl-images-amazon.com/images/M/....jpg\",\n        \"link\": \"http://www.imdb.com/name/nm0004874/?ref_=tt_cl_t1\",\n        \"name\": \"Vin Diesel\"\n      },\n      // ...\n    ],\n    \"imdb_id\": \"tt1677720\",\n    \"rating\": \"\",\n    \"genre\": [\n      \"Action\",\n      \"Adventure\",\n      \"Sci-Fi\"\n    ],\n    \"rating_count\": \"\",\n    \"storyline\": \"Film centers on...\",\n    \"description\": \"When the creator...\",\n    \"writers\": [\n      \"Zak Penn\",\n      \"Ernest Cline\"\n    ],\n    \"stars\": [\n      \"Vin Diesel\",\n      \"Olivia Cooke\",\n      \"Hannah John-Kamen\"\n    ],\n    \"poster\": {\n      \"large\": \"https://images-na.ssl-images-amazon.com/images/M/....jpg\",\n      \"thumb\": \"https://images-na.ssl-images-amazon.com/images/M/....jpg\"\n    }\n  }\n]\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` There’s a typo in the API response, where “ratio” is misspelled “retio” — we’ll address that in our schema.`}</p>\n    </blockquote>\n    <p>{`To convert this to a GraphQL type, we go field-by-field and add them, each with its corresponding type. Fields that return objects become their own types.`}</p>\n    <p>{`To avoid collisions with other GrAMPS data sources, we’ll add a prefix of `}<inlineCode parentName=\"p\">{`IMDB_`}</inlineCode>{` to each type.`}</p>\n    <p>{`Add the following to `}<inlineCode parentName=\"p\">{`src/schema.graphql`}</inlineCode>{` to define the movie type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`type IMDB_Movie {\n  cast: [IMDB_Cast]!\n  content_rating: String!\n  description: String!\n  director: String!\n  genre: [String]!\n  imdb_id: String!\n  length: String!\n  metadata: IMDB_Metadata!\n  original_title: String!\n  poster: IMDB_Poster!\n  rating: String!\n  rating_count: String!\n  release_date: String!\n  stars: [String]!\n  storyline: String!\n  title: String!\n  trailer: [IMDB_Trailer]!\n  url: IMDB_Url!\n  writers: [String]!\n  year: String!\n}\n\ntype IMDB_Cast {\n  character: String!\n  image: String!\n  link: String!\n  name: String!\n}\n\ntype IMDB_Metadata {\n  also_known_as: [String]!\n  # The aspect ratio of the film.\n  #\n  # NOTE: This field has a typo on the API (\\`asp_retio\\`).\n  asp_ratio: String!\n  budget: String!\n  countries: [String]!\n  filming_locations: [String]!\n  gross: String!\n  languages: [String]!\n  sound_mix: [String]!\n}\n\ntype IMDB_Poster {\n  large: String!\n  thumb: String!\n}\n\ntype IMDB_Trailer {\n  definition: String!\n  mimeType: String!\n  videoUrl: String!\n}\n\ntype IMDB_Url {\n  title: String\n  url: String!\n  year: String\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"next-up-write-resolvers\"\n    }}>{`Next Up: Write Resolvers`}</h2>\n    <p>{`At this point, we’ve got a way to get data, and a definition for how someone can access data — all that’s left now is to connect the API data to our GraphQL schema with resolvers.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}