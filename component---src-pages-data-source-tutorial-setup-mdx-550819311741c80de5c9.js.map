{"version":3,"sources":["webpack:///./src/pages/data-source-tutorial/setup.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","AnchorLinks","AnchorLink","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"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","file":"component---src-pages-data-source-tutorial-setup-mdx-550819311741c80de5c9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`In this tutorial, we’re going to create a data source for `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.theimdbapi.org/\"\n      }}>{`the IMDB API`}</a>{`, which allows us to look up information about movies.`}</p>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`> `}<a parentName=\"strong\" {...{\n            \"href\": \"/data-source-tutorial/setup\"\n          }}>{`Initial Data Source Setup`}</a></strong></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/connector\"\n        }}>{`Create a Connector`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/model\"\n        }}>{`Create a Model`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/schema\"\n        }}>{`Write a GraphQL Schema`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/resolvers\"\n        }}>{`Write Resolvers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/data-source-tutorial/dev\"\n        }}>{`Use Development Modes`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"in-this-section\"\n    }}>{`In This Section`}</h2>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Install the Data Source Base</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Update the Context Name for the Data Source</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Update package.json</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Update the README</AnchorLink>\n    </AnchorLinks>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` The goal of this tutorial is to create a data source that will act\nas a pass-through layer, meaning the GraphQL schema will exactly match the\nREST API response. This is not the only way to approach a data source, so\nplease refer to this less as a “how to design a schema” tutorial than a “how\nto create a GrAMPS-compatible data source” tutorial.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"install-the-data-source-base\"\n    }}>{`Install the Data Source Base`}</h2>\n    <p>{`To start off with most of the boilerplate taken care of, we’ll use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gramps-graphql/data-source-base\"\n      }}>{`GrAMPS data source base`}</a>{` as our starting point.`}</p>\n    <p>{`Create a folder for your new data source, then clone the data source base into it, update your remote Git URL, and install the dependencies.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`# Create a folder for your data source and move into it\nmkdir data-source-imdbapi\ncd data-source-imdbapi/\n\n# Clone the data source base into the new folder (note the trailing .)\ngit clone git@github.com:gramps-graphql/data-source-base.git .\n\n# Change the remote URL to your data source GitHub repo\ngit remote set-url origin git@github.com:gramps-graphql/data-source-imdbapi.git\n\n# Install dependencies\nyarn install\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` We use `}<a parentName=\"p\" {...{\n          \"href\": \"https://yarnpkg.com\"\n        }}>{`Yarn`}</a>{` because it’s currently better than npm at creating\nlockfiles and tends to be a little faster/less verbose than npm. That being\nsaid, you can use npm if you prefer without any problems.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"update-the-context-name-for-the-data-source\"\n    }}>{`Update the Context Name for the Data Source`}</h2>\n    <p>{`In a GraphQL server, resolver functions receive what’s called a “context”, which is an object that contains whatever we, as developers, want to pass along to help resolve our queries. The most common use of this is to provide a means of loading data, which is referred to as a “model” in the GrAMPS ecosystem.`}</p>\n    <p>{`Each GrAMPS data source will add its model to the context under a unique identifier, which we need to choose.`}</p>\n    <p>{`Open `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{` and update the context:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  import schema from './schema.graphql';\n  import resolvers from './resolvers';\n  import Connector from './connector';\n  import Model from './model';\n\n  /*\n   * For more information on the main data source object, see\n   * https://gramps.js.org/api/gramps/#gramps\n   */\n  export default {\n-   // TODO: Rename the context to describe the data source.\n-   context: 'YourDataSource',\n+   context: 'IMDBAPI',\n    model: new Model({ connector: new Connector() }),\n    schema,\n    resolvers,\n  };\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` In code examples, we show the diff of the changed file, which means\nred lines are the original code that needs to be changed or removed, and\ngreen lines show the completed edits.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"update-packagejson\"\n    }}>{`Update package.json`}</h2>\n    <p>{`Before we work on the code itself, we need to do a little bit of housekeeping. First, let’s edit `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` to add the correct info about our new data source.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  {\n-   \"name\": \"@gramps/data-source-base\",\n+   \"name\": \"@gramps/data-source-imdbapi\",\n-   \"description\": \"Base modules for a GrAMPS GraphQL data source.\",\n+   \"description\": \"GrAMPS GraphQL data source for the IMDB API.\",\n    \"contributors\": [\n-     \"Jason Lengstorf <jason@lengstorf.com>\"\n+     \"Your Name <your.email@example.org>\"\n    ],\n    \"repository\": {\n      \"type\": \"git\",\n-     \"url\": \"https://github.com/gramps-graphql/data-source-base.git\"\n+     \"url\": \"https://github.com/gramps-graphql/data-source-imdbapi.git\"\n    },\n    // ...\n  }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"update-the-readme\"\n    }}>{`Update the README`}</h2>\n    <p>{`Make sure to edit the name of the repo and the badges to point to your data source repo. An easy way to do this is to search for `}<inlineCode parentName=\"p\">{`data-source-base`}</inlineCode>{` in the README to find all the places that need to be updated.`}</p>\n    <h2 {...{\n      \"id\": \"next-up-create-a-connector\"\n    }}>{`Next Up: Create a Connector`}</h2>\n    <p>{`With the initial setup out of the way, we can start writing actual code. In the next section, we’ll tell our data source where to load data from.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}