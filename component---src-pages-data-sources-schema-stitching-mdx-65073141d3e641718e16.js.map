{"version":3,"sources":["webpack:///./src/pages/data-sources/schema-stitching.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","href","subDirectory","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn"],"mappings":"icAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,oNAAmM,mBAAGC,WAAW,KAAQ,CACrN,KAAQ,2EADuL,oBAAnM,KAGA,kHAEF,iBAAQ,CACN,GAAM,+BADR,gCAGA,iGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2NAQL,2BAAU,0BAAYA,WAAW,KAAvB,gBAAV,uEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sgBA8BL,8DACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,4EAAwJ,0BAAYA,WAAW,MAAvB,WAAxJ,WACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,cAAuF,0BAAYA,WAAW,MAAvB,MAAvF,QAA+I,0BAAYA,WAAW,MAAvB,SAA/I,YAEF,wEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,eAIL,2BAAU,mBAAGA,WAAW,KAAQ,CAC5B,KAAQ,qCADF,oCAAV,8BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6DASL,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sJAaL,wCACA,iBAAQ,CACN,GAAM,8BADR,8BAGA,+IACA,2BAAU,0BAAYA,WAAW,KAAvB,gBAAV,WAA8E,0BAAYA,WAAW,KAAvB,aAA9E,6CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0WAqBL,kEAAiD,0BAAYA,WAAW,KAAvB,QAAjD,MAAwG,0BAAYA,WAAW,KAAvB,KAAxG,aAAmK,0BAAYA,WAAW,KAAvB,YAAnK,uBAA+O,mBAAGA,WAAW,KAAQ,CACjQ,KAAQ,qCADmO,oCAA/O,kCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kGAUL,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mNAgBL,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,SAA3B,8CAAmH,0BAAYA,WAAW,KAAvB,uBAAnH,+KAAkW,kBAAIA,WAAW,KAAf,QAAlW,2DAA8b,kBAAIA,WAAW,KAAf,OAA9b,oCAEF,iBAAQ,CACN,GAAM,4BADR,4BAGA,kHACA,wKACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0NAQL,2BAAU,0BAAYA,WAAW,KAAvB,gBAAV,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ggBA4BL,uFAAsE,0BAAYA,WAAW,KAAvB,iBAAtE,4DAA4L,0BAAYA,WAAW,KAAvB,OAA5L,+BACA,2GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0DAIL,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,SAA3B,IAAyE,0BAAYA,WAAW,KAAvB,YAAzE,qBAAmJ,0BAAYA,WAAW,KAAvB,8BAAnJ,qDAA+Q,0BAAYA,WAAW,KAAvB,2EAEjR,6BAAY,mBAAGA,WAAW,KAAQ,CAC9B,KAAQ,qCADA,oCAAZ,iCAE+E,0BAAYA,WAAW,KAAvB,iBAF/E,KAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uKAeL,8CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8WAsBL,iBAAQ,CACN,GAAM,wDADR,wDAGA,2CAA0B,0BAAYA,WAAW,KAAvB,aAA1B,8FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kpBA+BL,sCAAqB,0BAAYA,WAAW,KAAvB,gBAArB,kBAAgG,0BAAYA,WAAW,KAAvB,YAAhG,sCAA2L,0BAAYA,WAAW,KAAvB,YAA3L,KACA,iCAAgB,0BAAYA,WAAW,KAAvB,aAAhB,eAAqF,0BAAYA,WAAW,KAAvB,YAArF,sFAAgO,0BAAYA,WAAW,KAAvB,iBAAhO,+CACA,2DAA0C,mBAAGA,WAAW,KAAQ,CAC5D,KAAQ,wFACP,0BAAYA,WAAW,KAAvB,iBAFL,mJAGA,0FACA,6FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0DAIL,mCAAkB,mBAAGA,WAAW,KAAQ,CACpC,KAAQ,qCADM,oCAAlB,gBAE8D,0BAAYA,WAAW,KAAvB,aAF9D,wBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yOAoBL,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,ufA2BL,yIAKJH,EAAWI,gBAAiB,G,uVC1WbC,ECGI,SAAC,GAAD,MAAGC,EAAH,EAAGA,MAAH,IAAUC,YAAV,MAAiB,GAAjB,SACjB,mBAAKC,UAAWC,IAAGC,cAAD,OAAgBC,YAAWJ,EAAKK,OAAhC,KAChB,mBAAKJ,UAAU,YACb,mBAAKA,UAAU,WACb,mBAAKA,UAAU,iBACb,kBAAIK,GAAG,aAAaL,UAAWM,QAC5BR,Q,kBCTES,ECIE,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,iBAA8BC,EAAqB,EAAjCC,WAGhBA,EAHiD,OAEnEC,KACEC,aAAgBF,WAHiD,EAkBnCD,GAAkBC,EAA5CG,EAlB6D,EAkB7DA,QAEFC,EAAUD,EAAN,eApB2D,EAkBpDE,aAEP,aAAqDP,EAE/D,OAAOK,EACL,mBAAKb,UAAS,WAAagB,OACzB,mBAAKhB,UAAU,WACb,iBAAGA,UAAWiB,OAAMH,KAAMA,GAA1B,8BAKF,M,8BClCSI,E,gLCkBbC,OAAA,WAAU,IAAD,EACgBC,KAAKlC,MAApBa,EADD,EACCA,KAAMsB,EADP,EACOA,KACRC,EAAaD,EAChBE,MAAM,KACNC,OAAOC,SACPC,OAAO,GAAG,GAEPC,EAAW5B,EAAK6B,KAAI,SAAAC,GAAQ,IAAD,EACzBC,EAAeC,IAAQF,EAAK,CAAEG,OAAO,IACrCC,EAAWH,IAAiBR,EAC5BR,EAAOO,EAAKa,QAAQZ,EAAYQ,GACtC,OACE,kBAAIK,IAAKN,EAAK7B,UAAWC,KAAE,OAAImC,gBAAeH,EAAnB,GAA+BI,aACxD,YAAC,OAAD,CAAMrC,UAAWiB,OAAMqB,GAAE,GAAKxB,GAC3Be,OAMT,OACE,mBAAK7B,UAAWuC,iBACd,mBAAKvC,UAAU,YACb,mBAAKA,UAAU,WACb,mBAAKA,UAAU,mCACb,uBACE,kBAAIA,UAAWwC,QAAOb,S,GAhCAc,IAAMC,W,SCmD7BC,IArDC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACGF,EAAlDG,mBAD+C,MACjC,GADiC,EAC7BvC,EAAgCoC,EAAhCpC,iBAAkBwC,EAAcJ,EAAdI,UACpCjD,EAA8CgD,EAA9ChD,KAAMD,EAAwCiD,EAAxCjD,MAAOmD,EAAiCF,EAAjCE,MAAOC,EAA0BH,EAA1BG,YAAaC,EAAaJ,EAAbI,SAI/BC,EAN6C,OAMrDzC,KAAQyC,WAUJ/B,EAAO+B,EACTN,EAASO,SAASnB,QAAQkB,EAAY,IACtCN,EAASO,SAOP/B,EAJCvB,EACEsB,EAAKE,MAAM,KAAKG,OAAO,GAAG,IAAMK,IAAQhC,EAAK,GAAI,CAAEiC,OAAO,IAD/C,GAKpB,OACE,YAACsB,EAAA,EAAD,CACEC,UAAU,EACVN,MAAOA,EACPO,UAAW1D,EACX2D,gBAAiBP,EACjBQ,aAAcP,EACdH,UAAWA,GAEX,YAAC,EAAD,CAAYlD,MAAOA,EAAO6D,MAAM,QAAQ5D,KAAMA,IAC7CA,GAAQ,YAAC,EAAD,CAAUsB,KAAMA,EAAMtB,KAAMA,EAAMuB,WAAYA,IACvD,YAACsC,EAAA,EAAD,CAAMC,QAAM,GACThB,EACD,YAAC,EAAD,CAAUrC,iBAAkBA,KAE9B,YAACsD,EAAA,EAAD,CACElB,YAAaA,EACbE,SAAUA,EACVzB,KAAMA,EACNtB,KAAMA,EACNuB,WAAYA,IAEd,YAACyC,EAAA,EAAD","file":"component---src-pages-data-sources-schema-stitching-mdx-65073141d3e641718e16.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/gramps-graphql/gramps/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`One of the most powerful ways to use GraphQL is to combine two distinct GraphQL schemas, allowing us to create aggregate queries that can load data from multiple back-ends. This is called `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html\"\n        }}>{`schema stitching`}</a>{`.`}</p>\n      <p>{`In this tutorial, we’ll learn how easy it is to stitch together two GrAMPS data sources.`}</p>\n    </PageDescription>\n    <h2 {...{\n      \"id\": \"part-1-create-a-data-source\"\n    }}>{`Part 1: Create a Data Source`}</h2>\n    <p>{`To get started, let’s create our first data source using the GraphQL CLI`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Use npx to run the command without having to install anything globally\nnpx graphql-cli create -b gramps-graphql/data-source-base data-source-stitchingtest\n\n# Move into the folder that was just created\ncd $_\n`}</code></pre>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{`, we can declare the entire data source for the sake of simplicity:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const getContext = (_, __, ctx) => Object.keys(ctx);\n\nexport default {\n  namespace: 'StitchingTest',\n  typeDefs: \\`\n    type Query {\n      getContext: [String]\n      getById(id: ID!): STX_Test\n    }\n    type STX_Test {\n      id: ID\n      value: String\n    }\n  \\`,\n  context: {\n    getValue: id => ({\n      id,\n      value: \\`from StitchingTest with ID “\\${id}”\\`,\n    }),\n  },\n  resolvers: {\n    Query: {\n      getContext,\n      getById: (_, { id }, ctx) => ctx.getValue(id),\n    },\n  },\n};\n`}</code></pre>\n    <p>{`This data source exposes two queries:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getContext`}</inlineCode>{` — returns an array of object keys that are present in the data source’s `}<inlineCode parentName=\"li\">{`context`}</inlineCode>{` object`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getById`}</inlineCode>{` — exposes `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` fields`}</li>\n    </ul>\n    <p>{`Let’s test this out by running the data source:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn dev\n`}</code></pre>\n    <p>{`At `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/playground\"\n      }}>{`http://localhost:8080/playground`}</a>{`, run the following query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gql\"\n      }}>{`{\n  getContext\n  getById(id: 3) {\n    value\n  }\n}\n`}</code></pre>\n    <p>{`We should see the following return value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"getContext\": [\n      \"getValue\"\n    ],\n    \"getById\": {\n      \"value\": \"from StitchingTest with ID “3”\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`So far so good.`}</p>\n    <h2 {...{\n      \"id\": \"add-local-schema-stitching\"\n    }}>{`Add Local Schema Stitching`}</h2>\n    <p>{`Next, let’s add some schema stitching to the existing data source, just to make sure it’s working the way we expected.`}</p>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{`, add a `}<inlineCode parentName=\"p\">{`stitching`}</inlineCode>{` property with the following definitions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  namespace: 'StitchingTest',\n  typeDefs: \\`...\\`,\n  context: { /* ... */ },\n  resolvers: { /* ... */ },\n  stitching: {\n    linkTypeDefs: \\`\n      extend type Query {\n        getStitchingContext: [String]\n      }\n    \\`,\n    resolvers: () => ({\n      Query: {\n        getStitchingContext: getContext,\n      },\n    }),\n  },\n};\n`}</code></pre>\n    <p>{`Restart the data source in your terminal (`}<inlineCode parentName=\"p\">{`ctrl`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` to stop, `}<inlineCode parentName=\"p\">{`yarn dev`}</inlineCode>{` to start), head to `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/playground\"\n      }}>{`http://localhost:8080/playground`}</a>{`, and run the following query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  {\n    getContext\n+   getStitchingContext\n    getById(id: 3) {\n      value\n    }\n  }\n`}</code></pre>\n    <p>{`We should see the following return value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"getContext\": [\n      \"getValue\"\n    ],\n    \"getStitchingContext\": [\n      \"StitchingTest\"\n    ],\n    \"getById\": {\n      \"value\": \"from StitchingTest with ID “3”\"\n    }\n  }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` Notice that the contexts are different in `}<inlineCode parentName=\"p\">{`getStitchingContext`}</inlineCode>{`. This happens because each data source scopes its context to its own namespace to prevent accidentally relying on another data source’s context. However, schema stitching `}<em parentName=\"p\">{`does`}</em>{` rely on multiple data source’s contexts, so we include `}<em parentName=\"p\">{`all`}</em>{` of the data sources’ contexts.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"add-a-second-data-source\"\n    }}>{`Add a Second Data Source`}</h2>\n    <p>{`Next, let’s create a second data source so we can set up more realistic schema stitching.`}</p>\n    <p>{`In your terminal, move into the same directory where your first data source was created, then run the following to create a second data source:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Use npx to run the command without having to install anything globally\nnpx graphql-cli create -b gramps-graphql/data-source-base data-source-stitchingtwo\n\n# Move into the folder that was just created\ncd $_\n`}</code></pre>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{`, create the second data source all in one place:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  namespace: 'StitchingTwo',\n  typeDefs: \\`\n    type Query {\n      getSomeValues(val: ID): ST2_Values\n    }\n    type ST2_Values {\n      foo: String\n      bar: String\n      bat: String\n    }\n  \\`,\n  context: {\n    getSomeValues: val => ({\n      foo: \\`Schema (val: \\${val})\\`,\n      bar: \\`Stitching (val: \\${val})\\`,\n      bat: \\`Rules (val: \\${val})\\`,\n    }),\n  },\n  resolvers: {\n    Query: {\n      getSomeValues: (_, { val }, ctx) => ctx.getSomeValues(val),\n    },\n  },\n};\n`}</code></pre>\n    <p>{`This data source is pretty bare bones: it has a single query — `}<inlineCode parentName=\"p\">{`getSomeValues`}</inlineCode>{` — that exposes three fields that have text and echo the `}<inlineCode parentName=\"p\">{`val`}</inlineCode>{` the query was called with.`}</p>\n    <p>{`To test it, let’s fire up the new data source along with the original data source:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn dev --data-source ../data-source-stitchingtest\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` `}<inlineCode parentName=\"p\">{`yarn dev`}</inlineCode>{` is shorthand for `}<inlineCode parentName=\"p\">{`gramps dev --data-source .`}</inlineCode>{`, so what we’re doing here is effectively running `}<inlineCode parentName=\"p\">{`gramps dev --data-source . --data-source ../data-source-stitchingtest`}</inlineCode></p>\n    </blockquote>\n    <p>{`Open `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/playground\"\n      }}>{`http://localhost:8080/playground`}</a>{` and update the query to call `}<inlineCode parentName=\"p\">{`getSomeValues`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  {\n    getContext\n    getStitchingContext\n    getById(id: 3) {\n      value\n    }\n+   getSomeValues(val: 2) {\n+     foo\n+     bar\n+     bat\n+   }\n  }\n`}</code></pre>\n    <p>{`The output should be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"getContext\": [\n      \"getValue\"\n    ],\n    \"getStitchingContext\": [\n      \"StitchingTwo\",\n      \"StitchingTest\"\n    ],\n    \"getById\": {\n      \"value\": \"from StitchingTest with ID “3”\"\n    },\n    \"getSomeValues\": {\n      \"foo\": \"Schema (val: 2)\",\n      \"bar\": \"Stitching (val: 2)\",\n      \"bat\": \"Rules (val: 2)\"\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-schema-stitching-to-combine-the-two-data-sources\"\n    }}>{`Use Schema Stitching to Combine the Two Data Sources`}</h2>\n    <p>{`Finally, let’s add `}<inlineCode parentName=\"p\">{`stitching`}</inlineCode>{` config to tie the two data source together. In the second data source, add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n  namespace: 'StitchingTwo',\n  typeDefs: \\`...\\`,\n  context: { /* ... */ },\n  resolvers: { /* ... */ },\n  stitching: {\n    linkTypeDefs: \\`\n      extend type STX_Test {\n        stitched: ST2_Values\n      }\n    \\`,\n    resolvers: mergeInfo => ({\n      STX_Test: {\n        stitched: {\n          fragment: 'fragment StitchingTestField on STX_Test { id }',\n          resolve: ({ id }, args, context, info) =>\n            mergeInfo.delegate(\n              'query',\n              'getSomeValues',\n              { val: id },\n              context,\n              info,\n            ),\n        },\n      },\n    }),\n  },\n};\n`}</code></pre>\n    <p>{`First, we use `}<inlineCode parentName=\"p\">{`linkTypeDefs`}</inlineCode>{` to extend the `}<inlineCode parentName=\"p\">{`STX_Test`}</inlineCode>{` type by adding a new field called `}<inlineCode parentName=\"p\">{`stitched`}</inlineCode>{`.`}</p>\n    <p>{`Then, in `}<inlineCode parentName=\"p\">{`resolvers`}</inlineCode>{`, we set up `}<inlineCode parentName=\"p\">{`stitched`}</inlineCode>{` — which is a field on our first data source, remember — to get its value from the `}<inlineCode parentName=\"p\">{`getSomeValues`}</inlineCode>{` query, which is in the second data source.`}</p>\n    <p>{`Under the hood, this is done using `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html#mergeSchemas\"\n      }}><inlineCode parentName=\"a\">{`mergeSchemas`}</inlineCode></a>{`. Be sure to check that out for additional information about how schema stitching happens, and some of the different ways you can work with it.`}</p>\n    <p>{`With the stitching config in place, let’s fire it up and test it.`}</p>\n    <p>{`Run the following command to start a gateway with both data sources:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn dev --data-source ../data-source-stitchingtest\n`}</code></pre>\n    <p>{`Then, open `}<a parentName=\"p\" {...{\n        \"href\": \"http://localhost:8080/playground\"\n      }}>{`http://localhost:8080/playground`}</a>{` and add the `}<inlineCode parentName=\"p\">{`stitching`}</inlineCode>{` field to the query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  {\n    getContext\n    getStitchingContext\n    getById(id: 3) {\n      value\n+     stitched {\n+       foo\n+       bar\n+       bat\n+     }\n    }\n    getSomeValues(val: 2) {\n      foo\n      bar\n      bat\n    }\n  }\n`}</code></pre>\n    <p>{`Once executed, we’ll see the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"getContext\": [\n      \"getValue\"\n    ],\n    \"getStitchingContext\": [\n      \"StitchingTwo\",\n      \"StitchingTest\"\n    ],\n    \"getById\": {\n      \"value\": \"from StitchingTest with ID “3”\",\n      \"stitched\": {\n        \"foo\": \"Schema (val: 3)\",\n        \"bar\": \"Stitching (val: 3)\",\n        \"bat\": \"Rules (val: 3)\"\n      }\n    },\n    \"getSomeValues\": {\n      \"foo\": \"Schema (val: 2)\",\n      \"bar\": \"Stitching (val: 2)\",\n      \"bat\": \"Rules (val: 2)\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`And that’s it! We now have one data source including data from a second data source as part of its own queries.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.string,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory } = repositoryProp || repository;\n\n  const href = `${baseUrl}/tree/master${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const href = slug.replace(currentTab, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"sourceRoot":""}